type: edu
custom_name: stage2
files:
- name: src/banking/Main.java
  visible: true
  text: |-
    package banking;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello, world!");
        }
    }
  learner_created: false
- name: test/SimpleBankSystemTest.java
  visible: false
  text: |-
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testing.TestedProgram;
    import org.hyperskill.hstest.dynamic.DynamicTest;

    import java.util.Random;
    import java.util.regex.Matcher;
    import java.util.regex.Pattern;

    public class SimpleBankSystemTest extends StageTest<String> {

        private static final Pattern cardNumberPattern = Pattern.compile("^400000\\d{10}$", Pattern.MULTILINE);
        private static final Pattern pinPattern = Pattern.compile("^\\d{4}$", Pattern.MULTILINE);

        @DynamicTest
        CheckResult test1_checkCardCredentials() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String correctCardNumber = cardNumberMatcher.group();

            output = program.execute("1");
            cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return CheckResult.wrong("You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return CheckResult.wrong("You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }

            String anotherCardNumber = cardNumberMatcher.group();

            if (anotherCardNumber.equals(correctCardNumber)) {
                return CheckResult.wrong("Your program generates two identical card numbers!");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test2_checkLogInAndLogOut() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            if (!cardNumberMatcher.find()) {
                return new CheckResult(false, "You are printing the card number " +
                    "incorrectly. The card number should look like in the example: " +
                    "400000DDDDDDDDDD, where D is a digit.");
            }

            Matcher pinMatcher = pinPattern.matcher(output);

            if (!pinMatcher.find()) {
                return new CheckResult(false, "You are printing the card PIN " +
                    "incorrectly. The PIN should look like in the example: DDDD, where D is " +
                    "a digit.");
            }
            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + correctPin);

            if (!output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should be signed in after " +
                    "entering the correct card information.");
            }

            output = program.execute("2");

            if (!output.toLowerCase().contains("create")) {
                return new CheckResult(false, "The user should be logged out after choosing 'Log out' option.\n" +
                    "And you should print the menu with 'Create an account' option.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test3_checkLogInWithWrongPin() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example!");
            }

            String correctCardNumber = cardNumberMatcher.group();
            String correctPin = pinMatcher.group();

            Random random = new Random();

            String incorrectPin = correctPin;

            while (correctPin.equals(incorrectPin)) {
                incorrectPin = String.valueOf(1000 + random.nextInt(8999));
            }

            program.execute("2");
            output = program.execute(correctCardNumber + "\n" + incorrectPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed in after" +
                    " entering incorrect card information.");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test4_checkLogInToNotExistingAccount() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number " +
                    "and PIN like in example");
            }

            String correctCardNumber = cardNumberMatcher.group();

            Random random = new Random();

            String correctPin = pinMatcher.group().trim();
            String incorrectCardNumber = correctCardNumber;

            while (correctCardNumber.equals(incorrectCardNumber)) {
                incorrectCardNumber = "400000" + (1_000_000_00 + random.nextInt(8_000_000_00));
            }

            program.execute("2");
            output = program.execute(incorrectCardNumber + "\n" + correctPin);

            if (output.toLowerCase().contains("successfully")) {
                return new CheckResult(false, "The user should not be signed" +
                    " in after entering the information of a non-existing card.");
            }

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test5_checkBalance() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);
            Matcher pinMatcher = pinPattern.matcher(output);

            if (!cardNumberMatcher.find() || !pinMatcher.find()) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            String correctPin = pinMatcher.group().trim();
            String correctCardNumber = cardNumberMatcher.group();

            program.execute("2");
            program.execute(correctCardNumber + "\n" + correctPin);
            output = program.execute("1");

            if (!output.contains("0")) {
                return new CheckResult(false, "Expected balance: 0");
            }

            program.execute("0");

            return CheckResult.correct();
        }

        @DynamicTest
        CheckResult test6_checkLuhnAlgorithm() {

            TestedProgram program = new TestedProgram();
            program.start();

            String output = program.execute("1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1");

            Matcher cardNumberMatcher = cardNumberPattern.matcher(output);

            boolean isSomeCardFound = false;
            int foundCards = 0;

            while (cardNumberMatcher.find()) {

                foundCards++;

                if (!isSomeCardFound) {
                    isSomeCardFound = true;
                }

                String cardNumber = cardNumberMatcher.group();

                if (!checkLuhnAlgorithm(cardNumber)) {
                    return new CheckResult(false, String.format("The card number %s doesnâ€™t pass the Luhn algorithm.", cardNumber));
                }
            }

            if (!isSomeCardFound) {
                return new CheckResult(false, "You should output card number and PIN like in example");
            }

            if (foundCards != 20) {
                return new CheckResult(false, "Tried to generate 20 cards, but found " + foundCards);
            }

            return CheckResult.correct();
        }

        private boolean checkLuhnAlgorithm(String cardNumber) {
            int result = 0;
            for (int i = 0; i < cardNumber.length(); i++) {
                int digit = Character.getNumericValue(cardNumber.charAt(i));
                if (i % 2 == 0) {
                    int doubleDigit = digit * 2 > 9 ? digit * 2 - 9 : digit * 2;
                    result += doubleDigit;
                    continue;
                }
                result += digit;
            }
            return result % 10 == 0;
        }
    }
  learner_created: false
- name: src/banking/Storage/CardInfoGenerator.java
  visible: true
  text: |
    package banking.Storage;

    import java.util.Random;

    public class CardInfoGenerator {
        Random random = new Random();
        public String generateNumber() {
            StringBuilder builder = new StringBuilder(16);
            builder.append(400000);
            for (int i = 0; i < 10; i++) {
                builder.append(random.nextInt(10));
            }
            return builder.toString();
        }
        public String generatePin() {
            StringBuilder builder = new StringBuilder(4);
            for (int i = 0; i < 4; i++) {
                builder.append(random.nextInt(10));
            }
            return builder.toString();
        }
    }
  learner_created: true
- name: src/banking/UI/Account.java
  visible: true
  text: |
    package banking.UI;

    public class Account {
        private final String number;
        private final String pin;
        private long balance = 0;

        public Account(final String number, final String pin) {
            this.number = number;
            this.pin = pin;
        }

        public long getBalance() {
            return balance;
        }

        public void setBalance(long balance) {
            this.balance = balance;
        }

        public String getNumber() {
            return number;
        }

        public String getPin() {
            return pin;
        }

    }
  learner_created: true
- name: src/banking/Controller/ProcessControl.java
  visible: true
  text: |
    package banking.Controller;

    import banking.Storage.AccountDataBase;
    import banking.Storage.CardInfoGenerator;
    import banking.Storage.StorageAccount;
    import banking.UI.*;

    public class ProcessControl {
        private Account currentAccount = null;
        private final CardInfoGenerator generator = new CardInfoGenerator();
        private final AccountDataBase accountDataBase = new AccountDataBase();

        public Account manageCreation() {
            String number = generator.generateNumber();
            String pin = generator.generatePin();
            StorageAccount storageAccount = new StorageAccount(number, pin);
            accountDataBase.add(storageAccount);
            return new Account(number, pin);
        }

        public boolean logIn(final Account account) {
            StorageAccount storageAccount = accountDataBase.getAccountBy(account.getNumber());
            boolean contains = storageAccount != null && storageAccount.getPin().equals(account.getPin());
            if (contains) {
                currentAccount = account;
            }
            return contains;
        }

        public long getBalance() {
            return currentAccount.getBalance();
        }

        public void logOut() {
            currentAccount = null;
        }
    }
  learner_created: true
- name: src/banking/Storage/StorageAccount.java
  visible: true
  text: |
    package banking.Storage;

    public class StorageAccount {
        private final String number;
        private final String pin;
        private long balance = 0;

        public StorageAccount(final String number, final String pin) {
            this.number = number;
            this.pin = pin;
        }

        public long getBalance() {
            return balance;
        }

        public void setBalance(long balance) {
            this.balance = balance;
        }

        public String getNumber() {
            return number;
        }

        public String getPin() {
            return pin;
        }
    }
  learner_created: true
- name: src/banking/Storage/AccountDataBase.java
  visible: true
  text: |
    package banking.Storage;

    import java.util.HashMap;
    import java.util.Map;

    public class AccountDataBase {
        private final Map<String, StorageAccount> dataBase = new HashMap<>();
        public void add(final StorageAccount account) {
            dataBase.put(account.getNumber(), account);
        }
        public StorageAccount getAccountBy(final String number) {
            return dataBase.get(number);
        }
    }
  learner_created: true
- name: src/banking/UI/UserInterface.java
  visible: true
  text: |
    package banking.UI;

    import banking.Controller.ProcessControl;
    import java.util.Scanner;

    public class UserInterface {
        private final Scanner scanner = new Scanner(System.in);
        State state = State.ENTER;
        final ProcessControl control = new ProcessControl();



        public void printMainMenu() {
            System.out.println("1. Create an account");
            System.out.println("2. Log into account");
            System.out.println("0. Exit");
        }

        public void printCreationResult(final String cardNumber, final String pin) {
            System.out.println("Your card has been created");
            System.out.println("Your card number:");
            System.out.println(cardNumber);
            System.out.println("Your card PIN:");
            System.out.println(pin);
        }

        public void printClientMenu() {
            System.out.println("1. Balance");
            System.out.println("2. Log out");
            System.out.println("0. Exit");
        }

        public void interact() {
            printMainMenu();
            while (state != State.EXIT) {
                switch (scanner.nextInt()) {
                    case 1: {
                        if (state == State.ENTER) {
                            Account account = control.manageCreation();
                            printCreationResult(account.getNumber(), account.getPin());
                            printMainMenu();
                        } else {
                            System.out.printf("Balance: %s\n", control.getBalance());
                            printClientMenu();
                        }
                        break;
                    }
                    case 2: {
                        if (state == State.ENTER) {
                            System.out.println("Enter your card number:");
                            String number = scanner.next();
                            System.out.println("Enter your PIN:");
                            String pin = scanner.next();
                            Account account = new Account(number, pin);
                            if (control.logIn(account)) {
                                System.out.println("You have successfully logged in!");
                                state = State.IN;
                                printClientMenu();
                            } else {
                                System.out.println("Wrong card number or PIN!\n");
                                printMainMenu();
                            }
                        } else {
                            System.out.println("You have successfully logged out!");
                            state = State.ENTER;
                            printMainMenu();
                        }
                        break;
                    }
                    case 0: {
                        control.logOut();
                        state = State.EXIT;
                        break;
                    }
                }
            }


        }
    }
  learner_created: true
- name: src/banking/UI/State.java
  visible: true
  text: |
    package banking.UI;

    public enum State {
        ENTER,
        IN,
        EXIT
    }
  learner_created: true
feedback_link: https://hyperskill.org/projects/93/stages/516/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 24 Aug 2021 21:24:16 UTC
record: 2
